#!/bin/bash
#
# $Id: infinidb.os 2862 2012-05-03 19:12:46Z dhill $
#
#
# infinidb        Starts Calpont InfiniDB database platform
#
#
# chkconfig: 2345 99 99
# description: InfiniDB is a database platform that utilizes Mysql
#
### BEGIN INIT INFO
# Provides:          $infinidb
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop InfiniDB DW DBMS
### END INIT INFO

# Source function library.
if [ -f /etc/init.d/functions ]; then
	. /etc/init.d/functions
else
killproc() {
	pkill $2 $1
}
fi

unset pathmunge
pathmunge () {
	if ! echo $PATH | egrep -q "(^|:)$1($|:)" ; then
	   if [ "$2" = "after" ] ; then
	      PATH=$PATH:$1
	   else
	      PATH=$1:$PATH
	   fi
	fi
}

CALPONT_HOME=/usr/local/Calpont
export CALPONT_CONFIG_FILE=$CALPONT_HOME/etc/Calpont.xml
export CALPONT_LIB=$CALPONT_HOME/lib

pathmunge $CALPONT_HOME/bin

RETVAL=0

# run dbbuilder if necessary
checkForSysCat() {
	if [ `editem -o 1001 | wc -l` -eq 0 ]; then

		echo -n "creating system catalog (be patient): "
		dbbuilder 7 > /tmp/dbbuilder.log &

		while [ -d /proc/$! ]; do
			sleep 5
			echo -n "."
		done

		echo " done."
	fi
}

# run upgrade script
upgradeDB() {

 	echo "Validate InfiniDB System Catalog:"

	df=$CALPONT_HOME/mysql/my.cnf

	#check for password set
	pwprompt=" "
	password=" "
	userprompt=" *** Enter MySQL password: "
	while true ; do
		$CALPONT_HOME/mysql/bin/mysql --defaults-file=$df --force --user=root $pwprompt -e status &>/tmp/idbmysql.log
		
		egrep -qs "ERROR 1045" /tmp/idbmysql.log
		if [ $? -eq 0 ]; then
			echo ""
			stty_orig=`stty -g`
			stty -echo
			echo -n "$userprompt"
			read -t 30 password
			stty $stty_orig
			echo " "

			if [ -z $password ]; then
				echo " "
				echo " Timeout: Continuing"
				return
			else
				pwprompt="--password=$password"
				userprompt=" *** Incorrect password, please re-enter MySQL password: "
			fi
		else
			egrep -qs "InfiniDB" /tmp/idbmysql.log
			if [ $? -ne 0 ]; then
				echo ""
				echo " ERROR: MySQL runtime error, exit..."
				cat /tmp/idbmysql.log
				exit 1
			else
				rm -f /tmp/idbmysql.log
				break
			fi
		fi
	done

	status="ERROR"
	if [ -x $CALPONT_HOME/bin/upgrade-infinidb.sh ]; then
		status="`$CALPONT_HOME/bin/upgrade-infinidb.sh doupgrade --password=$password`"
	fi
	if [ "$status" != "OK" ]; then
		echo " ERROR: Database upgrade script failed"
		exit 1
      fi

	echo " Validation Succesfully Completed"

}


# functionality test
funTest() {
	#check logging functionality
	echo -n " InfiniDB Logging check: " 
	logger -p local1.debug "Functional Test"
	status=`grep "Functional Test" /var/log/Calpont/debug.log > /tmp/debug.check`
	if [ `cat /tmp/debug.check | wc -c` -eq 0 ]; then
		echo "ERROR: InfiniDB logging not functioning"
	else
		echo "DONE"
	fi

	#check stop process flag
	echo -n " Platform Process check: " 

	if [ -f /tmp/StopCalpont ]; then
		echo "InfiniDB Platform is down"
		return
	fi

	#check Process statility from logs and ps command
	PSCOUNT=1

	DMLProcCnt=`ps ax -opid,comm | grep -c DMLProc | awk '{print $1}'`
	DDLProcCnt=`ps ax -opid,comm | grep -c DDLProc | awk '{print $1}'`
	ExeMgrCnt=`ps ax -opid,comm | grep -c ExeMgr | awk '{print $1}'`
	PrimProcCnt=`ps ax -opid,comm | grep -c PrimProc | awk '{print $1}'`
	controllernodeCnt=`ps ax -opid,comm | grep -c controllernode | awk '{print $1}'`
	workernodeCnt=`ps ax -opid,comm | grep -c workernode | awk '{print $1}'`

	badProc="dummy"
	if [ $DMLProcCnt -ne $PSCOUNT ]; then
		badProc="DMLProc"
	elif [ $DDLProcCnt -ne $PSCOUNT ]; then
		badProc="DDLProc"
	elif [ $ExeMgrCnt -ne $PSCOUNT ]; then
		badProc="ExeMgr"
	elif [ $PrimProcCnt -ne $PSCOUNT ]; then
		badProc="PrimProc"
	elif [ $controllernodeCnt -ne $PSCOUNT ]; then
		badProc="controllernode"
	elif [ $workernodeCnt -ne $PSCOUNT ]; then
		badProc="workernode"
	fi

	if [ $badProc != "dummy" ]; then
		echo " ERROR: Problem with InfiniDB process $badProc, should be a single version running"
		echo " "
		echo "***Stopping InfiniDB to allow the process problem to be resolved."
		echo " "
		stop
		exit 1
	fi

	DMLProcPID1=`ps ax -opid,comm | grep DMLProc | awk '{print $1}'`
	DDLProcPID1=`ps ax -opid,comm | grep DDLProc | awk '{print $1}'`
	ExeMgrPID1=`ps ax -opid,comm | grep ExeMgr | awk '{print $1}'`
	PrimProcPID1=`ps ax -opid,comm | grep PrimProc | awk '{print $1}'`
	controllernodePID1=`ps ax -opid,comm | grep controllernode | awk '{print $1}'`
	workernodePID1=`ps ax -opid,comm | grep workernode | awk '{print $1}'`

	sleep 3
	DMLProcPID2=`ps ax -opid,comm | grep DMLProc | awk '{print $1}'`
	DDLProcPID2=`ps ax -opid,comm | grep DDLProc | awk '{print $1}'`
	ExeMgrPID2=`ps ax -opid,comm | grep ExeMgr | awk '{print $1}'`
	PrimProcPID2=`ps ax -opid,comm | grep PrimProc | awk '{print $1}'`
	controllernodePID2=`ps ax -opid,comm | grep controllernode | awk '{print $1}'`
	workernodePID2=`ps ax -opid,comm | grep workernode | awk '{print $1}'`

	badProc="dummy"
	if [ $DMLProcPID1 -ne $DMLProcPID2 ]; then
		badProc="DMLProc"
	elif [ $DDLProcPID1 -ne $DDLProcPID2 ]; then
		badProc="DDLProc"
	elif [ $ExeMgrPID1 -ne $ExeMgrPID2 ]; then
		badProc="ExeMgr"
	elif [ $PrimProcPID1 -ne $PrimProcPID2 ]; then
		badProc="PrimProc"
	elif [ $controllernodePID1 -ne $controllernodePID2 ]; then
		badProc="controllernode"
	elif [ $workernodePID1 -ne $workernodePID2 ]; then
		badProc="workernode"
	fi

	if [ $badProc != "dummy" ]; then
		echo " ERROR: $badProc not Active"

		status=`tail -1 /var/log/Calpont/crit.log | grep  "allocated too much memory" > /tmp/crit.check`
		if [ `cat /tmp/crit.check | wc -c` -ne 0 ]; then
			echo " There isn't enough available system memory for the InfiniDB Process."
			echo " Check available/active memory and settings of /etc/sysctl.conf for memory limitations."
			echo " Check /var/log/Calpont/*.log files for additional information."
			echo " "
			echo "***Stopping InfiniDB to allow the memory problem to be resolved."
			echo " "
			stop
			exit 1
		else
			echo " Check /var/log/Calpont/*.log files for additional information"
			echo " "
			echo "***Stopping InfiniDB to allow the process problem to be resolved."
			echo " "
			stop
			exit 1
		fi
	else
		echo "DONE"
	fi

	echo -n " MySQL Daemon check: "
	/etc/init.d/mysql-Calpont status

	#check dbrm
	echo -n " Database check: "

	/usr/local/Calpont/bin/dbrmctl status > /tmp/dbrmctl.status
	status=`cat /tmp/dbrmctl.status | awk '{print $1}'`
	if [ $status != "OK." ]; then
		echo -n "ERROR: "
		cat /tmp/dbrmctl.status
		if [ $status != "DBRM is currently Read Only!" ]; then
			echo " ***DDL/DML are disabled, can only perform queries"
		fi
		echo " Check /var/log/Calpont/*.log files for additional information"
		return
	fi

	/usr/local/Calpont/bin/editem -o 2001 > /tmp/editem.status 2>&1
	cnt=`cat /tmp/editem.status | wc -l`
	if [ $cnt -eq 0 ]; then
		echo "ERROR: NO system catalog data"
		echo " Check /var/log/Calpont/*.log files for additional information"
		echo " "
		echo "***Stopping InfiniDB to allow the problem to be resolved."
		echo "A clean re-install of InfiniDB might be required to correct."
		stop
		exit 1
	fi

	#run save_brm to get a current file and run post-test
	/usr/local/Calpont/bin/save_brm > /tmp/savebrm.status 2>&1
	/usr/local/Calpont/bin/startupTests.sh > /tmp/startupTests.status 2>&1
	status=`cat /tmp/startupTests.status | awk '{print $1}'`
	if [ $status != "OK" ]; then
		echo "ERROR: Check /var/log/Calpont/crit.log files for additional information"
		echo " "
		echo "***Stopping InfiniDB to allow the problem to be resolved."
		stop
		exit 1
	fi

	echo "DONE"
}

checkInstallSetup() {
	if [ ! -d $CALPONT_HOME/data1/systemFiles/dbrm ]; then
		install-infinidb.sh
	fi
}

killProcesses() {
	killproc DMLProc -9 > /dev/null
	killproc DDLProc -9 > /dev/null
	killproc ExeMgr -9 > /dev/null
	killproc PrimProc -9 > /dev/null
	killproc controllernode -9 > /dev/null
	killproc workernode -9 > /dev/null
}

start() {
	checkInstallSetup
	touch /tmp/StopCalpont
	killProcesses
 	echo -n "Starting Calpont InfiniDB Database Platform: "
	rm -f /tmp/StopCalpont
	brm_prefix=$(cat $(getConfig SystemConfig DBRMRoot)_current 2>/dev/null)
	if [ -n "$brm_prefix" ]; then
		echo -n "."
		load_brm $brm_prefix > /tmp/load_brm.log
		sleep 5
		grep OK /tmp/load_brm.log >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo " "
			echo "Error when loading BRM data. Check log file at /tmp/load_brm.log"
			return  1
		fi
	fi
	echo -n "."
	run.sh workernode DBRM_Worker1 fg >/dev/null 2>&1 &
	sleep 1
	echo -n "."
	run.sh controllernode fg >/dev/null 2>&1 &
	sleep 1
	echo -n "."
	run.sh PrimProc >/dev/null 2>&1 &
	sleep 1
	echo -n "."
	run.sh ExeMgr >/dev/null 2>&1 &
	sleep 1
	echo -n "."
	run.sh DDLProc >/dev/null 2>&1 &
	sleep 1
	echo -n "."
	run.sh DMLProc >/dev/null 2>&1 &
	sleep 5
	echo " DONE"
	checkForSysCat
	RETVAL=0
 	echo "Starting Calpont InfiniDB MySQL: "
	/etc/init.d/mysql-Calpont start
	sleep 2
	upgradeDB
	[ $RETVAL -eq 0 ] && [ -d /var/lock/subsys ] && touch /var/lock/subsys/infinidb
	echo "Perform Functionality test: "
	funTest
	return $RETVAL
}	
stop() {
 	echo "Shutting down Calpont InfiniDB MySQL: "
	touch /tmp/StopCalpont
	/etc/init.d/mysql-Calpont stop
	echo "Shutting down Calpont InfiniDB Database Platform: "
	killProcesses
	reset_locks > /dev/null 2>&1
	save_brm > /dev/null 2>&1
	sleep 1
	RETVAL=0
	echo
	fuser -k 8604/tcp > /dev/null 2>&1
	clearShm
	[ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/infinidb
	return $RETVAL
}
restart() {
	stop
	sleep 10
	start
}	

status() {
	RETVAL=0
	funTest
	return $RETVAL
}	


case "$1" in
  start)
  	start
	;;
  stop)
  	stop
	;;
  restart)
  	restart
	;;
  condrestart)
  	[ -f /var/lock/subsys/infinidb ] && restart || :
	;;
  status)
  	status
	;;
  *)
	echo $"Usage: $0 {start|stop|restart|condrestart|status}"
	exit 1
esac

exit $?

